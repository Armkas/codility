/*
https://app.codility.com/demo/results/trainingE7CKDG-GUC/



给定一个起始下标为 0 的非空数组 A 用来表示一个链表结构，这个链表遵循如下构造：

        链表头（第一个节点）是数组中下标为 0 的元素；
        下标为 K 的节点的值为 A[K]；
        对于数组中下标为 K 的节点，其下一个节点的下标为 A[K]；
        如果一个节点的值为−1，则这个节点是链表的最后一个节点。

例如，对于如下的数组A：
  A[0] = 1
  A[1] = 4
  A[2] = -1
  A[3] = 3
  A[4] = 2

其对应的链表构造如下：

        第一个节点（链表头）的数组下标为 0，其值为 1；
        第二个节点的数组下标为 1，其值为 4；
        第三个节点的数组下标为 4，其值为 2；
        第四个节点的数组下标为 2，其值为 −1；

实现一个函数

    public func solution(_ A : inout [Int]) -> Int

对于给定的起始下标为 0、包含 N 个整数的非空数组A，返回按照上述规则所构造的链表的长度。

例如，给出如下的数组A：
  A[0] = 1
  A[1] = 4
  A[2] = -1
  A[3] = 3
  A[4] = 2

如上述例子所示，该函数应当返回 4 。

假定:

        N 是 [1..200,000] 内的 整数;
        数组 A 每个元素是取值范围 [−1..N-1] 内的 整数 ;
        输入数据总是保证有解，并且结果数列的长度有限。.

本题仅针对解法的正确性进行评测； 解法的时间和空间复杂度并不在评测范围内。

*/

public func solution(_ A : inout [Int]) -> Int {
    var count = 0 //跳转次数 + 1 == 连表长度
    var index = 0
    while index != -1 {
        index = A[index]
        count += 1
    }
    return count //index等于-1的那次循环,count还是加了1,
}